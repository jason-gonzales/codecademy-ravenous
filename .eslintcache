[{"/home/dev/ravenous/src/index.js":"1","/home/dev/ravenous/src/reportWebVitals.js":"2","/home/dev/ravenous/src/components/App/App.js":"3","/home/dev/ravenous/src/components/BusinessList/BusinessList.js":"4","/home/dev/ravenous/src/components/Business/Business.js":"5","/home/dev/ravenous/src/components/SearchBar/SearchBar.js":"6"},{"size":515,"mtime":1610490014733,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1610480909917,"results":"9","hashOfConfig":"8"},{"size":909,"mtime":1610592829375,"results":"10","hashOfConfig":"8"},{"size":415,"mtime":1610591822229,"results":"11","hashOfConfig":"8"},{"size":907,"mtime":1610499950495,"results":"12","hashOfConfig":"8"},{"size":2188,"mtime":1610592824357,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1ng7f23",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},"/home/dev/ravenous/src/index.js",[],["29","30"],"/home/dev/ravenous/src/reportWebVitals.js",[],"/home/dev/ravenous/src/components/App/App.js",[],"/home/dev/ravenous/src/components/BusinessList/BusinessList.js",[],"/home/dev/ravenous/src/components/Business/Business.js",[],["31","32"],"/home/dev/ravenous/src/components/SearchBar/SearchBar.js",["33"],"import React from 'react';\nimport './SearchBar.css';\n\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      term: '',\n      location: '',\n      sortBy: 'best_match'\n    }\n\n    this.getSortByclass = this.getSortByClass.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n    this.sortByOptions = {\n      \"Best Match\": \"best_match\",\n      \"Highest Rated\": \"rating\",\n      \"Most Reviewed\": \"review_count\"\n    }\n\n  }\n\n  getSortByClass(sortByOption) {\n    if (this.state.sortBy === sortByOption) {\n      return 'active';\n    } else {\n      return '';\n    }\n  }\n\n  handleSortByChange(sortByOption) {\n    this.setState({\n      sortBy: sortByOption\n    })\n  }\n\n  handleTermChange(e) {\n    this.setState({\n      term: e.target.value\n    })\n  }\n\n  handleLocationChange(e) {\n    this.setState({\n      location: e.target.value\n    })\n  }\n\n  handleSearch(event) {\n    this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy)\n    event.preventDefault();\n  }\n\n  renderSortByOptions() {\n    return Object.keys(this.sortByOptions).map(sortByOption => {\n      let sortByOptionValue = this.sortByOptions[sortByOption];\n      return <li\n        onClick={this.handleSortByChange.bind(this, sortByOptionValue)}\n        className={this.getSortByClass(sortByOptionValue)}\n        key={sortByOptionValue}>{sortByOption}</li>;\n\n    });\n  }\n\n  render() {\n\n    return (\n      <div className=\"SearchBar\">\n        <div className=\"SearchBar-sort-options\">\n          <ul>\n            {this.renderSortByOptions()}\n          </ul>\n        </div>\n        <div className=\"SearchBar-fields\">\n          <input\n            onChange={this.handleTermChange}\n            placeholder=\"Search Businesses\" />\n          <input\n            onChange={this.handleLocationChange}\n            placeholder=\"Where?\" />\n        </div>\n        <div\n          onClick={this.handleSearch}\n          className=\"SearchBar-submit\">\n          <a>Let's Go</a>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default SearchBar;\n",{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"34","replacedBy":"38"},{"ruleId":"36","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":88,"column":11,"nodeType":"42","endLine":88,"endColumn":14},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],["43"],["44"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]